//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""New action map"",
            ""id"": ""28880002-4596-4c57-ae70-cf741c5a29c7"",
            ""actions"": [
                {
                    ""name"": ""SwipeLeft"",
                    ""type"": ""PassThrough"",
                    ""id"": ""975ac7d3-81a2-4bde-a597-13cd895631a3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwipeRight"",
                    ""type"": ""PassThrough"",
                    ""id"": ""b6c00559-35ad-4f9e-abc5-b89f8e7c8d81"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f9d39267-198c-4b35-9905-c200d8dcb798"",
                    ""path"": ""<Touchscreen>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwipeLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""21898863-a6d4-4190-81eb-bf4361d25a53"",
                    ""path"": ""<Touchscreen>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwipeRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // New action map
        m_Newactionmap = asset.FindActionMap("New action map", throwIfNotFound: true);
        m_Newactionmap_SwipeLeft = m_Newactionmap.FindAction("SwipeLeft", throwIfNotFound: true);
        m_Newactionmap_SwipeRight = m_Newactionmap.FindAction("SwipeRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // New action map
    private readonly InputActionMap m_Newactionmap;
    private INewactionmapActions m_NewactionmapActionsCallbackInterface;
    private readonly InputAction m_Newactionmap_SwipeLeft;
    private readonly InputAction m_Newactionmap_SwipeRight;
    public struct NewactionmapActions
    {
        private @PlayerInput m_Wrapper;
        public NewactionmapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwipeLeft => m_Wrapper.m_Newactionmap_SwipeLeft;
        public InputAction @SwipeRight => m_Wrapper.m_Newactionmap_SwipeRight;
        public InputActionMap Get() { return m_Wrapper.m_Newactionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NewactionmapActions set) { return set.Get(); }
        public void SetCallbacks(INewactionmapActions instance)
        {
            if (m_Wrapper.m_NewactionmapActionsCallbackInterface != null)
            {
                @SwipeLeft.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnSwipeLeft;
                @SwipeLeft.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnSwipeLeft;
                @SwipeLeft.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnSwipeLeft;
                @SwipeRight.started -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnSwipeRight;
                @SwipeRight.performed -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnSwipeRight;
                @SwipeRight.canceled -= m_Wrapper.m_NewactionmapActionsCallbackInterface.OnSwipeRight;
            }
            m_Wrapper.m_NewactionmapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwipeLeft.started += instance.OnSwipeLeft;
                @SwipeLeft.performed += instance.OnSwipeLeft;
                @SwipeLeft.canceled += instance.OnSwipeLeft;
                @SwipeRight.started += instance.OnSwipeRight;
                @SwipeRight.performed += instance.OnSwipeRight;
                @SwipeRight.canceled += instance.OnSwipeRight;
            }
        }
    }
    public NewactionmapActions @Newactionmap => new NewactionmapActions(this);
    public interface INewactionmapActions
    {
        void OnSwipeLeft(InputAction.CallbackContext context);
        void OnSwipeRight(InputAction.CallbackContext context);
    }
}
